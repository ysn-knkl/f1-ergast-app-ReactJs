{"version":3,"sources":["components/Races/Tracks.js","components/Races/SeasonalRace.js","components/Champion/ChampItem.js","components/Champion/ChampionsList.js","components/assets/f1-logo.png","components/Header/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Tracks","racer","championID","className","style","Results","Driver","driverId","backgroundColor","Circuit","circuitName","givenName","familyName","Constructor","name","laps","grid","Time","time","points","SeasonalRaces","setYear","closeResult","useState","seasonalRaces","setseasonalRaces","useEffect","axios","method","url","then","response","data","MRData","RaceTable","Races","Table","striped","bordered","hover","colSpan","onClick","ArrowUpOutlined","map","index","styles","component","ChampItem","user","closeHandle","clickIndex","isTableSelected","setIsTableSelected","setsetYear","setchampionID","SeasonalRace","season","DriverStandings","ArrowDownOutlined","Constructors","round","wins","ChampionsList","champ","setChamp","setclickIndex","length","getChamp","a","StandingsTable","StandingsLists","Header","Navbar","bg","variant","expand","Container","Brand","href","alt","src","f1Logo","width","height","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f78be0db.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Tracks = ({ racer, championID }) => {\r\n  const findChamp = () => {\r\n    return championID === racer.Results[0].Driver.driverId;\r\n  };\r\n  return (\r\n    <>\r\n      <tr\r\n        className=\"tableId\"\r\n        style={findChamp() ? { backgroundColor: \"#20c997\" } : null}\r\n      >\r\n        <td>{racer.Circuit.circuitName}</td>\r\n        <td>{`${racer.Results[0].Driver.givenName} ${racer.Results[0].Driver.familyName}`}</td>\r\n        <td>{racer.Results[0].Constructor.name}</td>\r\n        <td>{racer.Results[0].laps}</td>\r\n        <td>{racer.Results[0].grid}</td>\r\n        <td>{racer.Results[0].Time.time}</td>\r\n        <td>{racer.Results[0].points}</td>\r\n      </tr>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tracks;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport Tracks from \"./Tracks\";\r\nimport { ArrowUpOutlined } from \"@ant-design/icons\";\r\n\r\nconst SeasonalRaces = ({ setYear, championID, closeResult }) => {\r\n  const [seasonalRaces, setseasonalRaces] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios({\r\n      method: \"get\",\r\n      url: `http://ergast.com/api/f1/${setYear}/results/1.json`,\r\n    }).then((response) => {\r\n      setseasonalRaces(response.data.MRData.RaceTable.Races);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Table striped bordered hover className=\"border border-3\">\r\n        <thead>\r\n          <tr>\r\n            <th\r\n              colSpan=\"6\"\r\n              className=\"hover-cursor\"\r\n              onClick={() => closeResult()}\r\n            >\r\n              Season:{setYear} Race Results\r\n            </th>\r\n            <th\r\n              colSpan=\"1\"\r\n              className=\"hover-cursor\"\r\n              onClick={() => closeResult()}\r\n            >\r\n              <ArrowUpOutlined></ArrowUpOutlined>\r\n            </th>\r\n          </tr>\r\n          <tr>\r\n            <th>Circuit Name</th>\r\n            <th>Winner</th>\r\n            <th>Constructor</th>\r\n            <th>Laps</th>\r\n            <th>Grid</th>\r\n            <th>Time</th>\r\n            <th>Points</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {seasonalRaces.map((racer, index) => (\r\n            <Tracks racer={racer} key={index} championID={championID} />\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  cardWraper: {\r\n    cursor: \"pointer\",\r\n  },\r\n};\r\n\r\nexport default SeasonalRaces;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport SeasonalRace from \"../Races/SeasonalRace\";\r\nimport { ArrowDownOutlined } from \"@ant-design/icons\";\r\n\r\nconst ChampItem = ({ user, closeHandle, clickIndex, index }) => {\r\n  const [isTableSelected, setIsTableSelected] = useState(clickIndex === index);\r\n  const [setYear, setsetYear] = useState(null);\r\n  const [championID, setchampionID] = useState(\"\");\r\n\r\n  const handleClick=(season, driverId)=> {\r\n    setIsTableSelected(true);\r\n    setsetYear(season);\r\n    setchampionID(driverId);\r\n    closeHandle(index);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (index !== clickIndex) {\r\n      setIsTableSelected(false);\r\n    }\r\n  }, [clickIndex]);\r\n\r\n  return (\r\n    <div style={styles.component} >\r\n      {isTableSelected ? (\r\n        <SeasonalRace\r\n          setYear={setYear}\r\n          championID={championID}\r\n          closeResult={() => setIsTableSelected(false)}\r\n        />\r\n      ) : (\r\n        <Table\r\n          striped\r\n          bordered\r\n          hover\r\n          className=\"border border-1 border-dark hover-cursor\"\r\n          onClick={() =>\r\n            handleClick(user.season, user.DriverStandings[0].Driver.driverId)\r\n          }\r\n          \r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th colSpan=\"4\" data-testid=\"champ-info\">Season:{user.season} Champion</th>\r\n              <th colSpan=\"1\">\r\n                <ArrowDownOutlined />\r\n              </th>\r\n            </tr>\r\n            <tr>\r\n              <th>Driver</th>\r\n              <th>Constructor</th>\r\n              <th>Points</th>\r\n              <th>Round</th>\r\n              <th>Wins</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>{`${user.DriverStandings[0].Driver.givenName} ${user.DriverStandings[0].Driver.familyName}`}</td>\r\n              <td>{user.DriverStandings[0].Constructors[0].name}</td>\r\n              <td>{user.DriverStandings[0].points}</td>\r\n              <td>{user.round}</td>\r\n              <td>{user.DriverStandings[0].wins}</td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  component: {\r\n    backgroundColor: \"#e5e5e5\",\r\n  },\r\n};\r\n\r\nexport default ChampItem;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ChampItem from \"./ChampItem\";\r\nimport axios from \"axios\";\r\n\r\nconst ChampionsList = () => {\r\n  const [champ, setChamp] = useState([]);\r\n  const [clickIndex, setclickIndex] = useState(null);\r\n\r\n  useEffect(() => {\r\n    champ.length<1 && getChamp();\r\n  }, []);\r\n\r\n  const getChamp = async () => {\r\n    await axios({\r\n      method: \"get\",\r\n      url: `https://ergast.com/api/f1/driverstandings/1.json?limit=60&offset=55`,\r\n    }).then((response) => {\r\n      setChamp(response.data.MRData.StandingsTable.StandingsLists);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-3 row\">\r\n      {champ.map((user, index) => (\r\n        <ChampItem\r\n          user={user}\r\n          clickIndex={clickIndex}\r\n          index={index}\r\n          closeHandle={(index)=>setclickIndex(index)}\r\n          key={index}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChampionsList;\r\n","export default __webpack_public_path__ + \"static/media/f1-logo.bf0bfd54.png\";","import React from \"react\";\r\nimport { Navbar, Container } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport f1Logo from \"../assets/f1-logo.png\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"true\">\r\n        <Container>\r\n          <Navbar.Brand href=\"#home\">\r\n            <img\r\n              alt=\"\"\r\n              src={f1Logo}\r\n              width=\"40\"\r\n              height=\"40\"\r\n              className=\"d-inline-block align-top\"\r\n            />\r\n          </Navbar.Brand>\r\n        </Container>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport ChampionsList from \"./components/Champion/ChampionsList\";\r\nimport Header from \"./components/Header/Header\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Container>\r\n        <ChampionsList />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}